generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String       @id
  username    String       @unique
  passhash    Bytes
  sessions    Session[]
  joinedRooms RoomMember[] @relation("UserMember")
  ownsRooms   Room[]       @relation("RoomOwner")
  events      Event[]
  attributes  Json         @default("{}")
}

model Session {
  id        String   @id
  token     String   @unique
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID    String
  expiresAt DateTime
}

model Room {
  id         String       @id
  name       String       @unique
  owner      User         @relation("RoomOwner", fields: [ownerID], references: [id], onDelete: Cascade)
  ownerID    String
  members    RoomMember[] @relation("RoomMember")
  events     Event[]
  attributes Json         @default("{}")
}

model RoomMember {
  room     Room     @relation("RoomMember", fields: [roomID], references: [id], onDelete: Cascade)
  roomID   String
  user     User     @relation("UserMember", fields: [userID], references: [id], onDelete: Cascade)
  userID   String
  joinedAt DateTime @default(now())

  @@id([roomID, userID])
}

model Event {
  id       String    @id
  type     EventType
  room     Room      @relation(fields: [roomID], references: [id], onDelete: Cascade)
  roomID   String
  author   User?     @relation(fields: [authorID], references: [id])
  authorID String?
  content  Json      @default("{}")
}

enum EventType {
  create_room
  update_room
  message_create
  message_update
  message_delete
  member_join
  member_leave
}
